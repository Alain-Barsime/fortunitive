{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# SkillConnect\n\n## Overview\n\nSkillConnect is a comprehensive full-stack social learning platform that combines e-learning, job opportunities, professional networking, and social media features. The application is built as a modern web platform using React for the frontend and Express.js for the backend, with real-time features and a rich user experience centered around skill development, course management, job matching, and professional networking.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React SPA**: Single-page application built with React 18 and TypeScript\n- **UI Framework**: Shadcn/ui components with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with CSS variables for theming and dark mode support\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for client-side routing\n- **Form Management**: React Hook Form with Zod validation\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Express.js Server**: RESTful API with TypeScript\n- **Session Management**: Express session middleware with secure cookie configuration\n- **Authentication**: BCrypt password hashing with session-based authentication\n- **API Design**: RESTful endpoints organized by feature modules (auth, courses, jobs, posts, messages)\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n- **Development Tools**: Hot reload with Vite integration for seamless development\n\n### Database Architecture\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL with Neon serverless hosting\n- **Schema Design**: \n  - Users table with role-based access (learner, instructor, employer, admin)\n  - Courses with enrollment tracking and progress monitoring\n  - Jobs with application management\n  - Social features (posts, messages, user follows)\n  - Financial transactions for payments and wallet management\n- **Migrations**: Drizzle Kit for database schema migrations\n\n### Key Features Implementation\n- **E-Learning System**: Course creation, enrollment, progress tracking, and certification\n- **Job Marketplace**: Job posting, application management, and skill-based matching\n- **Social Networking**: User profiles, following system, posts, and messaging\n- **Wallet System**: Integrated payment processing for course purchases and job payments\n- **Real-time Features**: Live messaging and notifications\n\n### Design Patterns\n- **Separation of Concerns**: Clear separation between client, server, and shared code\n- **Type Safety**: End-to-end TypeScript with shared schema definitions\n- **Component Architecture**: Reusable UI components with consistent design system\n- **Service Layer**: Storage abstraction layer for database operations\n- **Middleware Pattern**: Express middleware for authentication, logging, and error handling\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection\n- **drizzle-orm**: Type-safe SQL ORM for database operations\n- **bcrypt**: Password hashing for secure authentication\n- **express-session**: Session management for user authentication\n- **@tanstack/react-query**: Server state management and caching\n\n### UI Dependencies\n- **@radix-ui/***: Accessible UI component primitives\n- **tailwindcss**: Utility-first CSS framework\n- **lucide-react**: Icon library for consistent iconography\n- **class-variance-authority**: Dynamic CSS class generation\n- **embla-carousel-react**: Carousel component for content display\n\n### Development Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Static type checking\n- **@hookform/resolvers**: Form validation integration\n- **zod**: Runtime type validation and schema definition\n- **wouter**: Lightweight client-side routing\n\n### Optional Integrations\n- **WebSocket support**: Ready for real-time messaging implementation\n- **File upload services**: Configured for resume and course material uploads\n- **Payment gateways**: Prepared for transaction processing integration\n- **Email services**: Ready for notification and communication features","size_bytes":4254},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n        warning: \"hsl(var(--warning))\",\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"system-ui\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2897},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertCourseSchema, insertJobSchema, insertPostSchema, insertMessageSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Session middleware\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n    userRole?: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(\n    session({\n      secret: process.env.SESSION_SECRET || \"skillconnect_secret_key\",\n      resave: false,\n      saveUninitialized: false,\n      cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 } // 24 hours\n    })\n  );\n\n  // Auth middleware\n  const requireAuth = (req: Request, res: Response, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req: Request, res: Response) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 12);\n      \n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword\n      });\n\n      req.session.userId = user.id;\n      req.session.userRole = user.role;\n\n      res.json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          username: user.username, \n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role \n        } \n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid data\", error });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req: Request, res: Response) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.userId = user.id;\n      req.session.userRole = user.role;\n\n      res.json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          username: user.username, \n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          profilePicture: user.profilePicture,\n          walletBalance: user.walletBalance\n        } \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\", error });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req: Request, res: Response) => {\n    req.session.destroy(() => {\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", async (req: Request, res: Response) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          username: user.username, \n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          profilePicture: user.profilePicture,\n          walletBalance: user.walletBalance,\n          bio: user.bio,\n          skills: user.skills\n        } \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\", error });\n    }\n  });\n\n  // Course routes\n  app.get(\"/api/courses\", async (req: Request, res: Response) => {\n    try {\n      const { limit, category } = req.query;\n      const courses = await storage.getCourses(\n        limit ? parseInt(limit as string) : undefined,\n        category as string\n      );\n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch courses\", error });\n    }\n  });\n\n  app.post(\"/api/courses\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const courseData = insertCourseSchema.parse({\n        ...req.body,\n        instructorId: req.session.userId\n      });\n      \n      const course = await storage.createCourse(courseData);\n      res.json(course);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create course\", error });\n    }\n  });\n\n  app.get(\"/api/courses/:id\", async (req: Request, res: Response) => {\n    try {\n      const course = await storage.getCourseById(req.params.id);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch course\", error });\n    }\n  });\n\n  app.post(\"/api/courses/:id/enroll\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const enrollment = await storage.enrollInCourse(req.params.id, req.session.userId!);\n      res.json(enrollment);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to enroll in course\", error });\n    }\n  });\n\n  app.get(\"/api/my-courses\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const enrolledCourses = await storage.getEnrolledCourses(req.session.userId!);\n      res.json(enrolledCourses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch enrolled courses\", error });\n    }\n  });\n\n  // Job routes\n  app.get(\"/api/jobs\", async (req: Request, res: Response) => {\n    try {\n      const { limit, type } = req.query;\n      const jobs = await storage.getJobs(\n        limit ? parseInt(limit as string) : undefined,\n        type as string\n      );\n      res.json(jobs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch jobs\", error });\n    }\n  });\n\n  app.post(\"/api/jobs\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const jobData = insertJobSchema.parse({\n        ...req.body,\n        employerId: req.session.userId\n      });\n      \n      const job = await storage.createJob(jobData);\n      res.json(job);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create job\", error });\n    }\n  });\n\n  app.post(\"/api/jobs/:id/apply\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const { coverLetter } = req.body;\n      const application = await storage.applyToJob(req.params.id, req.session.userId!, coverLetter);\n      res.json(application);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to apply for job\", error });\n    }\n  });\n\n  app.get(\"/api/my-applications\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const applications = await storage.getUserJobApplications(req.session.userId!);\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch applications\", error });\n    }\n  });\n\n  // Post routes\n  app.get(\"/api/posts\", async (req: Request, res: Response) => {\n    try {\n      const { limit } = req.query;\n      const posts = await storage.getPosts(limit ? parseInt(limit as string) : undefined);\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch posts\", error });\n    }\n  });\n\n  app.post(\"/api/posts\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const postData = insertPostSchema.parse({\n        ...req.body,\n        authorId: req.session.userId\n      });\n      \n      const post = await storage.createPost(postData);\n      res.json(post);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create post\", error });\n    }\n  });\n\n  app.post(\"/api/posts/:id/like\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      await storage.likePost(req.params.id, req.session.userId!);\n      res.json({ message: \"Post liked successfully\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to like post\", error });\n    }\n  });\n\n  // Message routes\n  app.get(\"/api/messages/:userId\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const messages = await storage.getMessages(req.session.userId!, req.params.userId);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\", error });\n    }\n  });\n\n  app.post(\"/api/messages\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const messageData = insertMessageSchema.parse({\n        ...req.body,\n        senderId: req.session.userId\n      });\n      \n      const message = await storage.sendMessage(messageData);\n      res.json(message);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to send message\", error });\n    }\n  });\n\n  app.get(\"/api/conversations\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const conversations = await storage.getRecentConversations(req.session.userId!);\n      res.json(conversations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch conversations\", error });\n    }\n  });\n\n  // Search routes\n  app.get(\"/api/search\", async (req: Request, res: Response) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n\n      const results = await storage.searchAll(q);\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\", error });\n    }\n  });\n\n  // User profile routes\n  app.get(\"/api/users/:id\", async (req: Request, res: Response) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Don't return sensitive information\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\", error });\n    }\n  });\n\n  app.patch(\"/api/users/me\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const updates = req.body;\n      // Don't allow updating sensitive fields\n      delete updates.id;\n      delete updates.password;\n      delete updates.email;\n      delete updates.walletBalance;\n\n      const updatedUser = await storage.updateUser(req.session.userId!, updates);\n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update user\", error });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req: Request, res: Response) => {\n    try {\n      const userId = req.session.userId!;\n      \n      const [enrolledCourses, jobApplications, userPosts, transactions] = await Promise.all([\n        storage.getEnrolledCourses(userId),\n        storage.getUserJobApplications(userId),\n        storage.getUserPosts(userId),\n        storage.getUserTransactions(userId)\n      ]);\n\n      const completedCourses = enrolledCourses.filter(e => e.progress === 100);\n\n      res.json({\n        coursesEnrolled: enrolledCourses.length,\n        certificatesEarned: completedCourses.length,\n        jobApplications: jobApplications.length,\n        connections: 0, // TODO: Implement connections count\n        postsCreated: userPosts.length,\n        totalTransactions: transactions.length\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\", error });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12116},"server/storage.ts":{"content":"import { \n  users, \n  courses, \n  jobs, \n  posts, \n  messages, \n  courseEnrollments, \n  jobApplications, \n  transactions,\n  type User, \n  type InsertUser,\n  type Course,\n  type InsertCourse,\n  type Job,\n  type InsertJob,\n  type Post,\n  type InsertPost,\n  type Message,\n  type InsertMessage,\n  type CourseEnrollment,\n  type JobApplication,\n  type Transaction\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, ilike, or } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n\n  // Course operations\n  getCourses(limit?: number, category?: string): Promise<Course[]>;\n  getCourseById(id: string): Promise<Course | undefined>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  getUserCourses(userId: string): Promise<Course[]>;\n  getEnrolledCourses(userId: string): Promise<(CourseEnrollment & { course: Course })[]>;\n  enrollInCourse(courseId: string, studentId: string): Promise<CourseEnrollment>;\n\n  // Job operations\n  getJobs(limit?: number, type?: string): Promise<Job[]>;\n  getJobById(id: string): Promise<Job | undefined>;\n  createJob(job: InsertJob): Promise<Job>;\n  applyToJob(jobId: string, applicantId: string, coverLetter?: string): Promise<JobApplication>;\n  getUserJobApplications(userId: string): Promise<(JobApplication & { job: Job })[]>;\n\n  // Post operations\n  getPosts(limit?: number): Promise<(Post & { author: User })[]>;\n  createPost(post: InsertPost): Promise<Post>;\n  likePost(postId: string, userId: string): Promise<void>;\n  getUserPosts(userId: string): Promise<Post[]>;\n\n  // Message operations\n  getMessages(userId: string, otherUserId: string): Promise<Message[]>;\n  sendMessage(message: InsertMessage): Promise<Message>;\n  getRecentConversations(userId: string): Promise<(Message & { sender: User, recipient: User })[]>;\n\n  // Transaction operations\n  createTransaction(transaction: Omit<Transaction, 'id' | 'createdAt'>): Promise<Transaction>;\n  getUserTransactions(userId: string): Promise<Transaction[]>;\n\n  // Search operations\n  searchAll(query: string): Promise<{\n    courses: Course[];\n    jobs: Job[];\n    users: User[];\n    posts: (Post & { author: User })[];\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: sql`now()` })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getCourses(limit = 10, category?: string): Promise<Course[]> {\n    const query = db.select().from(courses).orderBy(desc(courses.createdAt)).limit(limit);\n    \n    if (category) {\n      return await query.where(eq(courses.category, category));\n    }\n    \n    return await query;\n  }\n\n  async getCourseById(id: string): Promise<Course | undefined> {\n    const [course] = await db.select().from(courses).where(eq(courses.id, id));\n    return course || undefined;\n  }\n\n  async createCourse(insertCourse: InsertCourse): Promise<Course> {\n    const [course] = await db\n      .insert(courses)\n      .values(insertCourse)\n      .returning();\n    return course;\n  }\n\n  async getUserCourses(userId: string): Promise<Course[]> {\n    return await db.select().from(courses).where(eq(courses.instructorId, userId));\n  }\n\n  async getEnrolledCourses(userId: string): Promise<(CourseEnrollment & { course: Course })[]> {\n    return await db\n      .select()\n      .from(courseEnrollments)\n      .innerJoin(courses, eq(courseEnrollments.courseId, courses.id))\n      .where(eq(courseEnrollments.studentId, userId));\n  }\n\n  async enrollInCourse(courseId: string, studentId: string): Promise<CourseEnrollment> {\n    const [enrollment] = await db\n      .insert(courseEnrollments)\n      .values({ courseId, studentId })\n      .returning();\n    return enrollment;\n  }\n\n  async getJobs(limit = 10, type?: string): Promise<Job[]> {\n    const query = db.select().from(jobs).where(eq(jobs.isActive, true)).orderBy(desc(jobs.createdAt)).limit(limit);\n    \n    if (type) {\n      return await query.where(and(eq(jobs.isActive, true), eq(jobs.type, type as any)));\n    }\n    \n    return await query;\n  }\n\n  async getJobById(id: string): Promise<Job | undefined> {\n    const [job] = await db.select().from(jobs).where(eq(jobs.id, id));\n    return job || undefined;\n  }\n\n  async createJob(insertJob: InsertJob): Promise<Job> {\n    const [job] = await db\n      .insert(jobs)\n      .values(insertJob)\n      .returning();\n    return job;\n  }\n\n  async applyToJob(jobId: string, applicantId: string, coverLetter?: string): Promise<JobApplication> {\n    const [application] = await db\n      .insert(jobApplications)\n      .values({ jobId, applicantId, coverLetter })\n      .returning();\n    return application;\n  }\n\n  async getUserJobApplications(userId: string): Promise<(JobApplication & { job: Job })[]> {\n    return await db\n      .select()\n      .from(jobApplications)\n      .innerJoin(jobs, eq(jobApplications.jobId, jobs.id))\n      .where(eq(jobApplications.applicantId, userId));\n  }\n\n  async getPosts(limit = 20): Promise<(Post & { author: User })[]> {\n    return await db\n      .select()\n      .from(posts)\n      .innerJoin(users, eq(posts.authorId, users.id))\n      .orderBy(desc(posts.createdAt))\n      .limit(limit);\n  }\n\n  async createPost(insertPost: InsertPost): Promise<Post> {\n    const [post] = await db\n      .insert(posts)\n      .values(insertPost)\n      .returning();\n    return post;\n  }\n\n  async likePost(postId: string, userId: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Check if already liked\n      const existing = await tx\n        .select()\n        .from(sql`post_likes`)\n        .where(and(sql`post_id = ${postId}`, sql`user_id = ${userId}`));\n\n      if (existing.length === 0) {\n        // Add like\n        await tx.insert(sql`post_likes`).values({ postId, userId });\n        // Update post likes count\n        await tx\n          .update(posts)\n          .set({ likesCount: sql`likes_count + 1` })\n          .where(eq(posts.id, postId));\n      }\n    });\n  }\n\n  async getUserPosts(userId: string): Promise<Post[]> {\n    return await db.select().from(posts).where(eq(posts.authorId, userId)).orderBy(desc(posts.createdAt));\n  }\n\n  async getMessages(userId: string, otherUserId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(\n        or(\n          and(eq(messages.senderId, userId), eq(messages.recipientId, otherUserId)),\n          and(eq(messages.senderId, otherUserId), eq(messages.recipientId, userId))\n        )\n      )\n      .orderBy(desc(messages.createdAt));\n  }\n\n  async sendMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n\n  async getRecentConversations(userId: string): Promise<(Message & { sender: User, recipient: User })[]> {\n    return await db\n      .select()\n      .from(messages)\n      .innerJoin(users, eq(messages.senderId, users.id))\n      .innerJoin(sql`users as recipients`, eq(messages.recipientId, sql`recipients.id`))\n      .where(or(eq(messages.senderId, userId), eq(messages.recipientId, userId)))\n      .orderBy(desc(messages.createdAt))\n      .limit(10);\n  }\n\n  async createTransaction(transaction: Omit<Transaction, 'id' | 'createdAt'>): Promise<Transaction> {\n    const [newTransaction] = await db\n      .insert(transactions)\n      .values(transaction)\n      .returning();\n    return newTransaction;\n  }\n\n  async getUserTransactions(userId: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  async searchAll(query: string): Promise<{\n    courses: Course[];\n    jobs: Job[];\n    users: User[];\n    posts: (Post & { author: User })[];\n  }> {\n    const searchTerm = `%${query}%`;\n\n    const [searchedCourses, searchedJobs, searchedUsers, searchedPosts] = await Promise.all([\n      db.select().from(courses).where(or(ilike(courses.title, searchTerm), ilike(courses.description, searchTerm))).limit(5),\n      db.select().from(jobs).where(or(ilike(jobs.title, searchTerm), ilike(jobs.description, searchTerm))).limit(5),\n      db.select().from(users).where(or(ilike(users.username, searchTerm), ilike(users.firstName, searchTerm), ilike(users.lastName, searchTerm))).limit(5),\n      db.select().from(posts).innerJoin(users, eq(posts.authorId, users.id)).where(ilike(posts.content, searchTerm)).limit(5)\n    ]);\n\n    return {\n      courses: searchedCourses,\n      jobs: searchedJobs,\n      users: searchedUsers,\n      posts: searchedPosts\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9751},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, decimal, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\"learner\", \"instructor\", \"employer\", \"admin\"]);\nexport const jobTypeEnum = pgEnum(\"job_type\", [\"full-time\", \"part-time\", \"contract\", \"internship\", \"freelance\"]);\nexport const applicationStatusEnum = pgEnum(\"application_status\", [\"pending\", \"accepted\", \"rejected\"]);\nexport const transactionTypeEnum = pgEnum(\"transaction_type\", [\"deposit\", \"withdrawal\", \"course_purchase\", \"job_payment\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  bio: text(\"bio\"),\n  profilePicture: text(\"profile_picture\"),\n  resumeUrl: text(\"resume_url\"),\n  role: userRoleEnum(\"role\").notNull().default(\"learner\"),\n  walletBalance: decimal(\"wallet_balance\", { precision: 10, scale: 2 }).notNull().default(\"0.00\"),\n  skills: text(\"skills\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// User followers/following\nexport const userFollows = pgTable(\"user_follows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  followerId: varchar(\"follower_id\").references(() => users.id).notNull(),\n  followingId: varchar(\"following_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Courses table\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  thumbnail: text(\"thumbnail\"),\n  price: decimal(\"price\", { precision: 8, scale: 2 }).notNull().default(\"0.00\"),\n  instructorId: varchar(\"instructor_id\").references(() => users.id).notNull(),\n  category: text(\"category\").notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  totalStudents: integer(\"total_students\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Course enrollments\nexport const courseEnrollments = pgTable(\"course_enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  studentId: varchar(\"student_id\").references(() => users.id).notNull(),\n  progress: integer(\"progress\").default(0), // percentage\n  completedAt: timestamp(\"completed_at\"),\n  certificateUrl: text(\"certificate_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Course reviews\nexport const courseReviews = pgTable(\"course_reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  studentId: varchar(\"student_id\").references(() => users.id).notNull(),\n  rating: integer(\"rating\").notNull(),\n  review: text(\"review\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Jobs table\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  company: text(\"company\").notNull(),\n  location: text(\"location\").notNull(),\n  salary: text(\"salary\"),\n  type: jobTypeEnum(\"type\").notNull(),\n  skills: text(\"skills\").array(),\n  employerId: varchar(\"employer_id\").references(() => users.id).notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Job applications\nexport const jobApplications = pgTable(\"job_applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").references(() => jobs.id).notNull(),\n  applicantId: varchar(\"applicant_id\").references(() => users.id).notNull(),\n  status: applicationStatusEnum(\"status\").default(\"pending\"),\n  coverLetter: text(\"cover_letter\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Posts table\nexport const posts = pgTable(\"posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  authorId: varchar(\"author_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  mediaUrl: text(\"media_url\"),\n  likesCount: integer(\"likes_count\").default(0),\n  commentsCount: integer(\"comments_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Post likes\nexport const postLikes = pgTable(\"post_likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").references(() => posts.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Post comments\nexport const postComments = pgTable(\"post_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").references(() => posts.id).notNull(),\n  authorId: varchar(\"author_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Messages table\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  senderId: varchar(\"sender_id\").references(() => users.id).notNull(),\n  recipientId: varchar(\"recipient_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Transactions table\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: transactionTypeEnum(\"type\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  relatedId: varchar(\"related_id\"), // course_id, job_id, etc.\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  courses: many(courses),\n  enrollments: many(courseEnrollments),\n  reviews: many(courseReviews),\n  jobs: many(jobs),\n  applications: many(jobApplications),\n  posts: many(posts),\n  sentMessages: many(messages, { relationName: \"sender\" }),\n  receivedMessages: many(messages, { relationName: \"recipient\" }),\n  transactions: many(transactions),\n  followers: many(userFollows, { relationName: \"following\" }),\n  following: many(userFollows, { relationName: \"follower\" }),\n}));\n\nexport const coursesRelations = relations(courses, ({ one, many }) => ({\n  instructor: one(users, {\n    fields: [courses.instructorId],\n    references: [users.id],\n  }),\n  enrollments: many(courseEnrollments),\n  reviews: many(courseReviews),\n}));\n\nexport const courseEnrollmentsRelations = relations(courseEnrollments, ({ one }) => ({\n  course: one(courses, {\n    fields: [courseEnrollments.courseId],\n    references: [courses.id],\n  }),\n  student: one(users, {\n    fields: [courseEnrollments.studentId],\n    references: [users.id],\n  }),\n}));\n\nexport const jobsRelations = relations(jobs, ({ one, many }) => ({\n  employer: one(users, {\n    fields: [jobs.employerId],\n    references: [users.id],\n  }),\n  applications: many(jobApplications),\n}));\n\nexport const postsRelations = relations(posts, ({ one, many }) => ({\n  author: one(users, {\n    fields: [posts.authorId],\n    references: [users.id],\n  }),\n  likes: many(postLikes),\n  comments: many(postComments),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n    relationName: \"sender\",\n  }),\n  recipient: one(users, {\n    fields: [messages.recipientId],\n    references: [users.id],\n    relationName: \"recipient\",\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  walletBalance: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  rating: true,\n  totalStudents: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPostSchema = createInsertSchema(posts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  likesCount: true,\n  commentsCount: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n  isRead: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type Course = typeof courses.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertPost = z.infer<typeof insertPostSchema>;\nexport type Post = typeof posts.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type CourseEnrollment = typeof courseEnrollments.$inferSelect;\nexport type JobApplication = typeof jobApplications.$inferSelect;\nexport type Transaction = typeof transactions.$inferSelect;\n","size_bytes":10019},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ui/theme-provider\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Login from \"@/pages/auth/login\";\nimport Register from \"@/pages/auth/register\";\nimport Courses from \"@/pages/courses/courses\";\nimport CourseDetail from \"@/pages/courses/course-detail\";\nimport Jobs from \"@/pages/jobs/jobs\";\nimport Profile from \"@/pages/profile/profile\";\nimport Messages from \"@/pages/messages/messages\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/courses\" component={Courses} />\n      <Route path=\"/courses/:id\" component={CourseDetail} />\n      <Route path=\"/jobs\" component={Jobs} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/messages\" component={Messages} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"skillconnect-ui-theme\">\n        <AuthProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1714},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(220 100% 20%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(220 100% 20%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(220 100% 20%);\n  --primary: hsl(220 100% 50%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(220 100% 97%);\n  --secondary-foreground: hsl(220 100% 20%);\n  --muted: hsl(220 20% 95%);\n  --muted-foreground: hsl(220 30% 60%);\n  --accent: hsl(220 100% 50%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(220 30% 90%);\n  --input: hsl(220 30% 95%);\n  --ring: hsl(220 100% 50%);\n  --chart-1: hsl(220 100% 50%);\n  --chart-2: hsl(220 80% 60%);\n  --chart-3: hsl(220 60% 70%);\n  --chart-4: hsl(220 40% 80%);\n  --chart-5: hsl(220 20% 90%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(220 100% 20%);\n  --sidebar-primary: hsl(220 100% 50%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(220 20% 95%);\n  --sidebar-accent-foreground: hsl(220 100% 20%);\n  --sidebar-border: hsl(220 30% 90%);\n  --sidebar-ring: hsl(220 100% 50%);\n  --warning: hsl(42 100% 50%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(220 100% 8%);\n  --foreground: hsl(0 0% 100%);\n  --card: hsl(220 100% 10%);\n  --card-foreground: hsl(0 0% 100%);\n  --popover: hsl(220 100% 10%);\n  --popover-foreground: hsl(0 0% 100%);\n  --primary: hsl(220 100% 60%);\n  --primary-foreground: hsl(220 100% 8%);\n  --secondary: hsl(220 50% 15%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(220 50% 15%);\n  --muted-foreground: hsl(220 30% 70%);\n  --accent: hsl(220 100% 60%);\n  --accent-foreground: hsl(220 100% 8%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(220 50% 20%);\n  --input: hsl(220 50% 15%);\n  --ring: hsl(220 100% 60%);\n  --chart-1: hsl(220 100% 60%);\n  --chart-2: hsl(220 80% 70%);\n  --chart-3: hsl(220 60% 80%);\n  --chart-4: hsl(220 40% 90%);\n  --chart-5: hsl(220 20% 95%);\n  --sidebar: hsl(220 100% 10%);\n  --sidebar-foreground: hsl(0 0% 100%);\n  --sidebar-primary: hsl(220 100% 60%);\n  --sidebar-primary-foreground: hsl(220 100% 8%);\n  --sidebar-accent: hsl(220 50% 15%);\n  --sidebar-accent-foreground: hsl(0 0% 100%);\n  --sidebar-border: hsl(220 50% 20%);\n  --sidebar-ring: hsl(220 100% 60%);\n  --warning: hsl(42 100% 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n@layer utilities {\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n","size_bytes":2757},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (userData: any) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n\n  // Get current user\n  const { data: userData, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/auth/me\", {\n          credentials: \"include\",\n        });\n        if (!response.ok) {\n          if (response.status === 401) {\n            return null;\n          }\n          throw new Error(\"Failed to fetch user\");\n        }\n        const data = await response.json();\n        return data.user;\n      } catch (error) {\n        console.error(\"Auth check failed:\", error);\n        return null;\n      }\n    },\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  useEffect(() => {\n    if (userData) {\n      setUser(userData);\n    } else {\n      setUser(null);\n    }\n  }, [userData]);\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ email, password }: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", { email, password });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setUser(data.user);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\");\n      return response.json();\n    },\n    onSuccess: () => {\n      setUser(null);\n      queryClient.clear();\n      // Redirect to login page\n      window.location.href = \"/login\";\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setUser(data.user);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const login = async (email: string, password: string) => {\n    return loginMutation.mutateAsync({ email, password });\n  };\n\n  const logout = async () => {\n    return logoutMutation.mutateAsync();\n  };\n\n  const register = async (userData: any) => {\n    return registerMutation.mutateAsync(userData);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        login,\n        logout,\n        register,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3195},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { Navigation } from \"@/components/layout/navigation\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { StatsCards } from \"@/components/dashboard/stats-cards\";\nimport { ContinueLearning } from \"@/components/dashboard/continue-learning\";\nimport { RecommendedJobs } from \"@/components/dashboard/recommended-jobs\";\nimport { ActivityFeed } from \"@/components/dashboard/activity-feed\";\nimport { FeaturedCourses } from \"@/components/dashboard/featured-courses\";\nimport { NetworkSuggestions } from \"@/components/dashboard/network-suggestions\";\nimport { RecentMessages } from \"@/components/dashboard/recent-messages\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Plus, Home, GraduationCap, Briefcase, Users, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">\n            Please log in to access the dashboard\n          </h1>\n          <Button asChild>\n            <a href=\"/login\">Go to Login</a>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-background text-foreground font-sans transition-colors duration-300 min-h-screen\">\n      <Navigation />\n\n      <div className=\"flex\">\n        <Sidebar />\n\n        {/* Main Content */}\n        <main className=\"flex-1 p-6\">\n          {/* Welcome Section */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n              Welcome back, {user.firstName}!\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Continue your learning journey and explore new opportunities.\n            </p>\n          </div>\n\n          {/* Stats Cards */}\n          <StatsCards />\n\n          {/* Main Content Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Left Column */}\n            <div className=\"lg:col-span-2 space-y-8\">\n              <ContinueLearning />\n              <RecommendedJobs />\n              <ActivityFeed />\n            </div>\n\n            {/* Right Column */}\n            <div className=\"space-y-8\">\n              <FeaturedCourses />\n              <NetworkSuggestions />\n              <RecentMessages />\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-6 right-6 z-40\">\n        <Button className=\"w-14 h-14 bg-primary text-white rounded-full shadow-lg hover:bg-blue-700 transition-colors\">\n          <Plus className=\"h-6 w-6\" />\n        </Button>\n      </div>\n\n      {/* Mobile Navigation */}\n      <nav className=\"lg:hidden fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 z-50\">\n        <div className=\"flex justify-around py-2\">\n          <a href=\"/\" className=\"flex flex-col items-center py-2 px-3 text-primary\">\n            <Home className=\"h-6 w-6\" />\n            <span className=\"text-xs mt-1\">Home</span>\n          </a>\n          <a href=\"/courses\" className=\"flex flex-col items-center py-2 px-3 text-gray-600 dark:text-gray-400\">\n            <GraduationCap className=\"h-6 w-6\" />\n            <span className=\"text-xs mt-1\">Learn</span>\n          </a>\n          <a href=\"/jobs\" className=\"flex flex-col items-center py-2 px-3 text-gray-600 dark:text-gray-400\">\n            <Briefcase className=\"h-6 w-6\" />\n            <span className=\"text-xs mt-1\">Jobs</span>\n          </a>\n          <a href=\"/network\" className=\"flex flex-col items-center py-2 px-3 text-gray-600 dark:text-gray-400\">\n            <Users className=\"h-6 w-6\" />\n            <span className=\"text-xs mt-1\">Network</span>\n          </a>\n          <a href=\"/profile\" className=\"flex flex-col items-center py-2 px-3 text-gray-600 dark:text-gray-400\">\n            <User className=\"h-6 w-6\" />\n            <span className=\"text-xs mt-1\">Profile</span>\n          </a>\n        </div>\n      </nav>\n    </div>\n  );\n}\n","size_bytes":4172},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/dashboard/activity-feed.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, MessageCircle, Share2 } from \"lucide-react\";\nimport type { Post, User } from \"@shared/schema\";\n\ninterface PostWithAuthor extends Post {\n  author: User;\n}\n\nexport function ActivityFeed() {\n  const { data: posts, isLoading } = useQuery<PostWithAuthor[]>({\n    queryKey: [\"/api/posts\"],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6\">Recent Activity</h2>\n        <div className=\"space-y-6\">\n          {[1, 2].map((i) => (\n            <div key={i} className=\"animate-pulse flex items-start space-x-3\">\n              <div className=\"w-10 h-10 bg-gray-200 dark:bg-gray-600 rounded-full\"></div>\n              <div className=\"flex-1\">\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-600 rounded mb-2\"></div>\n                  <div className=\"h-16 bg-gray-200 dark:bg-gray-600 rounded\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </section>\n    );\n  }\n\n  if (!posts || posts.length === 0) {\n    return (\n      <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6\">Recent Activity</h2>\n        <div className=\"text-center py-8\">\n          <p className=\"text-gray-500 dark:text-gray-400\">No recent activity to show</p>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n      <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6\">Recent Activity</h2>\n\n      <div className=\"space-y-6\">\n        {posts.slice(0, 2).map((post) => (\n          <div key={post.id} className=\"flex items-start space-x-3\">\n            <img\n              src={post.author.profilePicture || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?auto=format&fit=crop&w=100&h=100\"}\n              alt=\"User avatar\"\n              className=\"w-10 h-10 rounded-full\"\n            />\n            <div className=\"flex-1\">\n              <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-medium text-gray-900 dark:text-gray-100\">\n                    {post.author.firstName} {post.author.lastName}\n                  </span>\n                  <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                    {new Date(post.createdAt).toLocaleDateString()}\n                  </span>\n                </div>\n                <p className=\"text-gray-700 dark:text-gray-300\">{post.content}</p>\n                {post.mediaUrl && (\n                  <img\n                    src={post.mediaUrl}\n                    alt=\"Post media\"\n                    className=\"mt-3 rounded-lg max-h-64 w-full object-cover\"\n                  />\n                )}\n                <div className=\"flex items-center mt-3 space-x-4\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"flex items-center text-gray-500 dark:text-gray-400 hover:text-primary\"\n                  >\n                    <Heart className=\"h-4 w-4 mr-1\" />\n                    <span className=\"text-sm\">{post.likesCount || 0}</span>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"flex items-center text-gray-500 dark:text-gray-400 hover:text-primary\"\n                  >\n                    <MessageCircle className=\"h-4 w-4 mr-1\" />\n                    <span className=\"text-sm\">{post.commentsCount || 0}</span>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"flex items-center text-gray-500 dark:text-gray-400 hover:text-primary\"\n                  >\n                    <Share2 className=\"h-4 w-4 mr-1\" />\n                    <span className=\"text-sm\">Share</span>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4606},"client/src/components/dashboard/continue-learning.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { CourseEnrollment, Course } from \"@shared/schema\";\n\ninterface EnrolledCourse extends CourseEnrollment {\n  course: Course;\n}\n\nexport function ContinueLearning() {\n  const { data: enrolledCourses, isLoading } = useQuery<EnrolledCourse[]>({\n    queryKey: [\"/api/my-courses\"],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">Continue Learning</h2>\n        </div>\n        <div className=\"space-y-4\">\n          {[1, 2].map((i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"flex items-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                <div className=\"w-16 h-16 bg-gray-200 dark:bg-gray-600 rounded-lg\"></div>\n                <div className=\"flex-1 ml-4\">\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-600 rounded mb-2\"></div>\n                  <div className=\"h-3 bg-gray-200 dark:bg-gray-600 rounded mb-2\"></div>\n                  <div className=\"h-2 bg-gray-200 dark:bg-gray-600 rounded\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </section>\n    );\n  }\n\n  if (!enrolledCourses || enrolledCourses.length === 0) {\n    return (\n      <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">Continue Learning</h2>\n        </div>\n        <div className=\"text-center py-8\">\n          <p className=\"text-gray-500 dark:text-gray-400 mb-4\">No courses enrolled yet</p>\n          <Button>Browse Courses</Button>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">Continue Learning</h2>\n        <a href=\"/courses\" className=\"text-primary hover:text-blue-800 text-sm font-medium\">\n          View All\n        </a>\n      </div>\n\n      <div className=\"space-y-4\">\n        {enrolledCourses.slice(0, 2).map((enrollment) => (\n          <div\n            key={enrollment.id}\n            className=\"flex items-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\n          >\n            <img\n              src={enrollment.course.thumbnail || \"https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=100&h=100\"}\n              alt={enrollment.course.title}\n              className=\"w-16 h-16 rounded-lg object-cover\"\n            />\n            <div className=\"flex-1 ml-4\">\n              <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">\n                {enrollment.course.title}\n              </h3>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Course by Instructor\n              </p>\n              <div className=\"mt-2\">\n                <Progress value={enrollment.progress || 0} className=\"w-full h-2\" />\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                  {enrollment.progress || 0}% Complete\n                </p>\n              </div>\n            </div>\n            <Button className=\"ml-4\">Continue</Button>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":3867},"client/src/components/dashboard/featured-courses.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Star } from \"lucide-react\";\nimport type { Course } from \"@shared/schema\";\n\nexport function FeaturedCourses() {\n  const { data: courses, isLoading } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\", { limit: 2 }],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Featured Courses</h2>\n        </div>\n        <div className=\"space-y-4\">\n          {[1, 2].map((i) => (\n            <div key={i} className=\"animate-pulse border border-gray-200 dark:border-gray-600 rounded-lg overflow-hidden\">\n              <div className=\"w-full h-32 bg-gray-200 dark:bg-gray-600\"></div>\n              <div className=\"p-4\">\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-600 rounded mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 dark:bg-gray-600 rounded mb-2\"></div>\n                <div className=\"flex justify-between\">\n                  <div className=\"h-6 w-12 bg-gray-200 dark:bg-gray-600 rounded\"></div>\n                  <div className=\"h-4 w-8 bg-gray-200 dark:bg-gray-600 rounded\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </section>\n    );\n  }\n\n  if (!courses || courses.length === 0) {\n    return (\n      <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Featured Courses</h2>\n        </div>\n        <div className=\"text-center py-8\">\n          <p className=\"text-gray-500 dark:text-gray-400\">No featured courses available</p>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Featured Courses</h2>\n        <a href=\"/courses\" className=\"text-primary hover:text-blue-800 text-sm\">\n          View All\n        </a>\n      </div>\n\n      <div className=\"space-y-4\">\n        {courses.map((course) => (\n          <div\n            key={course.id}\n            className=\"border border-gray-200 dark:border-gray-600 rounded-lg overflow-hidden hover:shadow-md transition-shadow cursor-pointer\"\n          >\n            <img\n              src={course.thumbnail || \"https://images.unsplash.com/photo-1498050108023-c5249f4df085?auto=format&fit=crop&w=300&h=160\"}\n              alt={course.title}\n              className=\"w-full h-32 object-cover\"\n            />\n            <div className=\"p-4\">\n              <h3 className=\"font-medium text-gray-900 dark:text-gray-100 mb-1\">\n                {course.title}\n              </h3>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                by Instructor\n              </p>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-lg font-bold text-primary\">\n                  ${course.price}\n                </span>\n                <div className=\"flex items-center\">\n                  <Star className=\"h-4 w-4 text-yellow-400 fill-current\" />\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400 ml-1\">\n                    {course.rating || \"4.8\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":3822},"client/src/components/dashboard/network-suggestions.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\n// Mock data for network suggestions\nconst networkSuggestions = [\n  {\n    id: \"1\",\n    name: \"Sarah Wilson\",\n    title: \"UX Designer at Google\",\n    profilePicture: \"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?auto=format&fit=crop&w=100&h=100\",\n  },\n  {\n    id: \"2\",\n    name: \"David Kim\",\n    title: \"Product Manager at Meta\",\n    profilePicture: \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?auto=format&fit=crop&w=100&h=100\",\n  },\n  {\n    id: \"3\",\n    name: \"Jennifer Brown\",\n    title: \"Data Scientist at Netflix\",\n    profilePicture: \"https://images.unsplash.com/photo-1551836022-deb4988cc6c0?auto=format&fit=crop&w=100&h=100\",\n  },\n];\n\nexport function NetworkSuggestions() {\n  return (\n    <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">People You May Know</h2>\n        <a href=\"/network\" className=\"text-primary hover:text-blue-800 text-sm\">\n          See All\n        </a>\n      </div>\n\n      <div className=\"space-y-4\">\n        {networkSuggestions.map((person) => (\n          <div key={person.id} className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <img\n                src={person.profilePicture}\n                alt=\"Network suggestion\"\n                className=\"w-10 h-10 rounded-full\"\n              />\n              <div className=\"ml-3\">\n                <p className=\"font-medium text-gray-900 dark:text-gray-100\">\n                  {person.name}\n                </p>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {person.title}\n                </p>\n              </div>\n            </div>\n            <Button size=\"sm\">Connect</Button>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":2012},"client/src/components/dashboard/recent-messages.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Message, User } from \"@shared/schema\";\n\ninterface MessageWithUsers extends Message {\n  sender: User;\n  recipient: User;\n}\n\n// Mock data for recent messages\nconst recentMessages = [\n  {\n    id: \"1\",\n    sender: {\n      id: \"1\",\n      firstName: \"Mike\",\n      lastName: \"Johnson\",\n      profilePicture: \"https://images.unsplash.com/photo-1560250097-0b93528c311a?auto=format&fit=crop&w=100&h=100\",\n    },\n    content: \"Thanks for applying! I'd like to schedule...\",\n    createdAt: new Date(Date.now() - 2 * 60 * 1000).toISOString(), // 2 minutes ago\n  },\n  {\n    id: \"2\",\n    sender: {\n      id: \"2\",\n      firstName: \"Dr.\",\n      lastName: \"Anderson\",\n      profilePicture: \"https://images.unsplash.com/photo-1582750433449-648ed127bb54?auto=format&fit=crop&w=100&h=100\",\n    },\n    content: \"Great work on your assignment! Your...\",\n    createdAt: new Date(Date.now() - 60 * 60 * 1000).toISOString(), // 1 hour ago\n  },\n];\n\nexport function RecentMessages() {\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 60) {\n      return `${diffInMinutes}m`;\n    } else if (diffInMinutes < 1440) {\n      return `${Math.floor(diffInMinutes / 60)}h`;\n    } else {\n      return `${Math.floor(diffInMinutes / 1440)}d`;\n    }\n  };\n\n  return (\n    <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">Recent Messages</h2>\n        <a href=\"/messages\" className=\"text-primary hover:text-blue-800 text-sm\">\n          View All\n        </a>\n      </div>\n\n      <div className=\"space-y-3\">\n        {recentMessages.map((message) => (\n          <div\n            key={message.id}\n            className=\"flex items-center p-3 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg cursor-pointer\"\n          >\n            <img\n              src={message.sender.profilePicture || \"\"}\n              alt=\"Message sender\"\n              className=\"w-10 h-10 rounded-full\"\n            />\n            <div className=\"ml-3 flex-1\">\n              <div className=\"flex items-center justify-between\">\n                <p className=\"font-medium text-gray-900 dark:text-gray-100 text-sm\">\n                  {message.sender.firstName} {message.sender.lastName}\n                </p>\n                <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {formatTime(message.createdAt)}\n                </span>\n              </div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 truncate\">\n                {message.content}\n              </p>\n            </div>\n            <div className=\"w-2 h-2 bg-primary rounded-full ml-2\"></div>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":3043},"client/src/components/dashboard/recommended-jobs.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Building, MapPin } from \"lucide-react\";\nimport type { Job } from \"@shared/schema\";\n\nexport function RecommendedJobs() {\n  const { data: jobs, isLoading } = useQuery<Job[]>({\n    queryKey: [\"/api/jobs\"],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">Recommended Jobs</h2>\n        </div>\n        <div className=\"space-y-4\">\n          {[1, 2].map((i) => (\n            <div key={i} className=\"animate-pulse border border-gray-200 dark:border-gray-600 rounded-lg p-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start\">\n                  <div className=\"w-12 h-12 bg-gray-200 dark:bg-gray-600 rounded-lg mr-4\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 dark:bg-gray-600 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 dark:bg-gray-600 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 dark:bg-gray-600 rounded\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </section>\n    );\n  }\n\n  if (!jobs || jobs.length === 0) {\n    return (\n      <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">Recommended Jobs</h2>\n        </div>\n        <div className=\"text-center py-8\">\n          <p className=\"text-gray-500 dark:text-gray-400\">No job recommendations available</p>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">Recommended Jobs</h2>\n        <a href=\"/jobs\" className=\"text-primary hover:text-blue-800 text-sm font-medium\">\n          View All\n        </a>\n      </div>\n\n      <div className=\"space-y-4\">\n        {jobs.slice(0, 2).map((job) => (\n          <div\n            key={job.id}\n            className=\"border border-gray-200 dark:border-gray-600 rounded-lg p-4 hover:border-primary hover:shadow-md transition-all\"\n          >\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex items-start\">\n                <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center mr-4\">\n                  <Building className=\"text-primary h-6 w-6\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">{job.title}</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">{job.company}</p>\n                  <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400 mt-1\">\n                    <MapPin className=\"h-4 w-4 mr-1\" />\n                    {job.location}\n                  </div>\n                  <div className=\"flex items-center mt-2 space-x-4\">\n                    <span className=\"text-sm font-medium text-accent\">{job.salary || \"Salary not disclosed\"}</span>\n                    <Badge\n                      variant=\"secondary\"\n                      className={\n                        job.type === \"full-time\"\n                          ? \"bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-400\"\n                          : \"bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-400\"\n                      }\n                    >\n                      {job.type}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n              <Button>Apply</Button>\n            </div>\n            {job.skills && job.skills.length > 0 && (\n              <div className=\"mt-3 flex flex-wrap gap-2\">\n                {job.skills.slice(0, 3).map((skill) => (\n                  <Badge\n                    key={skill}\n                    variant=\"outline\"\n                    className=\"text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300\"\n                  >\n                    {skill}\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4848},"client/src/components/dashboard/stats-cards.tsx":{"content":"import { Book, Award, Briefcase, Users } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface DashboardStats {\n  coursesEnrolled: number;\n  certificatesEarned: number;\n  jobApplications: number;\n  connections: number;\n}\n\nexport function StatsCards() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const statsData = [\n    {\n      title: \"Courses Enrolled\",\n      value: stats?.coursesEnrolled || 0,\n      icon: Book,\n      bgColor: \"bg-blue-100 dark:bg-blue-900/20\",\n      textColor: \"text-primary\",\n    },\n    {\n      title: \"Certificates Earned\",\n      value: stats?.certificatesEarned || 0,\n      icon: Award,\n      bgColor: \"bg-green-100 dark:bg-green-900/20\",\n      textColor: \"text-accent\",\n    },\n    {\n      title: \"Job Applications\",\n      value: stats?.jobApplications || 0,\n      icon: Briefcase,\n      bgColor: \"bg-orange-100 dark:bg-orange-900/20\",\n      textColor: \"text-warning\",\n    },\n    {\n      title: \"Connections\",\n      value: stats?.connections || 342,\n      icon: Users,\n      bgColor: \"bg-purple-100 dark:bg-purple-900/20\",\n      textColor: \"text-purple-600\",\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[1, 2, 3, 4].map((i) => (\n          <div key={i} className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 animate-pulse\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded-lg\"></div>\n              <div className=\"ml-4 flex-1\">\n                <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {statsData.map((stat) => {\n        const Icon = stat.icon;\n        return (\n          <div\n            key={stat.title}\n            className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\"\n          >\n            <div className=\"flex items-center\">\n              <div className={`w-12 h-12 ${stat.bgColor} rounded-lg flex items-center justify-center`}>\n                <Icon className={`${stat.textColor} text-xl h-6 w-6`} />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                  {stat.value}\n                </p>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{stat.title}</p>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2881},"client/src/components/layout/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Search, Bell, MessageCircle, Moon, Sun, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useState } from \"react\";\n\nexport function Navigation() {\n  const [location] = useLocation();\n  const { theme, setTheme } = useTheme();\n  const { user, logout } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      window.location.href = `/search?q=${encodeURIComponent(searchQuery)}`;\n    }\n  };\n\n  return (\n    <nav className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <Link href=\"/\">\n              <div className=\"flex items-center cursor-pointer\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-graduation-cap text-white text-sm\"></i>\n                </div>\n                <span className=\"ml-2 text-xl font-bold text-primary\">SkillConnect</span>\n              </div>\n            </Link>\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"hidden md:block flex-1 max-w-lg mx-8\">\n            <form onSubmit={handleSearch} className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search courses, jobs, people...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 pr-4 py-2 w-full bg-gray-50 dark:bg-gray-700 border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-primary focus:border-transparent\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            </form>\n          </div>\n\n          {/* Navigation Icons */}\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-2 text-gray-600 dark:text-gray-400 hover:text-primary\"\n            >\n              <Bell className=\"h-5 w-5\" />\n              <span className=\"absolute -mt-6 ml-2 w-2 h-2 bg-red-500 rounded-full\"></span>\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-2 text-gray-600 dark:text-gray-400 hover:text-primary\"\n            >\n              <MessageCircle className=\"h-5 w-5\" />\n            </Button>\n            \n            {/* Dark Mode Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n              className=\"p-2 text-gray-600 dark:text-gray-400 hover:text-primary\"\n            >\n              <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n              <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n            </Button>\n\n            {/* Profile */}\n            {user && (\n              <div className=\"relative\">\n                <img\n                  src={user.profilePicture || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"}\n                  alt=\"Profile\"\n                  className=\"w-8 h-8 rounded-full cursor-pointer border-2 border-transparent hover:border-primary\"\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3977},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  Home, \n  GraduationCap, \n  Briefcase, \n  Users, \n  Newspaper, \n  MessageCircle, \n  Wallet,\n  Plus,\n  Edit,\n  FileText\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Home },\n  { name: \"My Learning\", href: \"/courses\", icon: GraduationCap },\n  { name: \"Jobs\", href: \"/jobs\", icon: Briefcase },\n  { name: \"Network\", href: \"/network\", icon: Users },\n  { name: \"Feed\", href: \"/feed\", icon: Newspaper },\n  { name: \"Messages\", href: \"/messages\", icon: MessageCircle },\n  { name: \"Wallet\", href: \"/wallet\", icon: Wallet },\n];\n\nconst quickActions = [\n  { name: \"Create Course\", icon: Plus },\n  { name: \"Post Job\", icon: Briefcase },\n  { name: \"Create Post\", icon: Edit },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  if (!user) return null;\n\n  return (\n    <aside className=\"hidden lg:block w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 min-h-screen\">\n      <div className=\"p-6\">\n        {/* User Profile Quick View */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center mb-4\">\n            <img\n              src={user.profilePicture || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"}\n              alt=\"Profile\"\n              className=\"w-12 h-12 rounded-full\"\n            />\n            <div className=\"ml-3\">\n              <p className=\"font-semibold\">{user.firstName} {user.lastName}</p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 capitalize\">{user.role}</p>\n            </div>\n          </div>\n          <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-3\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span>Wallet Balance</span>\n              <span className=\"font-semibold text-accent\">${user.walletBalance || \"0.00\"}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <div className={`flex items-center px-3 py-2 rounded-lg font-medium transition-colors ${\n                  isActive\n                    ? \"text-primary bg-blue-50 dark:bg-blue-900/20\"\n                    : \"text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                }`}>\n                  <Icon className=\"w-5 h-5\" />\n                  <span className=\"ml-3\">{item.name}</span>\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Quick Actions */}\n        <div className=\"mt-8\">\n          <h4 className=\"font-medium text-gray-900 dark:text-gray-100 mb-3\">Quick Actions</h4>\n          <div className=\"space-y-2\">\n            {quickActions.map((action) => {\n              const Icon = action.icon;\n              return (\n                <Button\n                  key={action.name}\n                  variant=\"ghost\"\n                  className=\"w-full justify-start px-3 py-2 text-sm text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                >\n                  <Icon className=\"w-4 h-4 mr-2\" />\n                  {action.name}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3674},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-provider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"skillconnect-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1620},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/auth/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Welcome back!\",\n        description: `Logged in as ${data.user.firstName} ${data.user.lastName}`,\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-graduation-cap text-white text-lg\"></i>\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Welcome to SkillConnect</CardTitle>\n          <p className=\"text-gray-600 dark:text-gray-400\">Sign in to your account</p>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Don't have an account?{\" \"}\n              <a href=\"/register\" className=\"font-medium text-primary hover:text-blue-800\">\n                Sign up\n              </a>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4418},"client/src/pages/auth/register.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertUserSchema } from \"@shared/schema\";\n\nconst registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"learner\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterForm) => {\n      const { confirmPassword, ...userData } = data;\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Welcome to SkillConnect!\",\n        description: `Account created successfully for ${data.user.firstName} ${data.user.lastName}`,\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 px-4 py-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-graduation-cap text-white text-lg\"></i>\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Join SkillConnect</CardTitle>\n          <p className=\"text-gray-600 dark:text-gray-400\">Create your account to get started</p>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"First name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Last name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"Enter your email\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Choose a username\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select your role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"learner\">Learner</SelectItem>\n                        <SelectItem value=\"instructor\">Instructor</SelectItem>\n                        <SelectItem value=\"employer\">Employer</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" placeholder=\"Create a password\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm Password</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" placeholder=\"Confirm your password\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={registerMutation.isPending}\n              >\n                {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Already have an account?{\" \"}\n              <a href=\"/login\" className=\"font-medium text-primary hover:text-blue-800\">\n                Sign in\n              </a>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7690},"client/src/pages/courses/course-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/layout/navigation\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Clock, Users, PlayCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Course } from \"@shared/schema\";\n\nexport default function CourseDetail() {\n  const params = useParams();\n  const courseId = params.id as string;\n  const { toast } = useToast();\n\n  const { data: course, isLoading } = useQuery<Course>({\n    queryKey: [\"/api/courses\", courseId],\n    enabled: !!courseId,\n  });\n\n  const enrollMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/courses/${courseId}/enroll`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Enrollment successful!\",\n        description: \"You have successfully enrolled in the course.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-courses\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Enrollment failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-gray-50 dark:bg-gray-900 min-h-screen\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar />\n          <main className=\"flex-1 p-6\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded mb-4\"></div>\n              <div className=\"h-64 bg-gray-200 dark:bg-gray-700 rounded mb-6\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  if (!course) {\n    return (\n      <div className=\"bg-gray-50 dark:bg-gray-900 min-h-screen\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar />\n          <main className=\"flex-1 p-6\">\n            <div className=\"text-center py-12\">\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\n                Course not found\n              </h1>\n              <Button asChild>\n                <a href=\"/courses\">Back to Courses</a>\n              </Button>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-gray-50 dark:bg-gray-900 min-h-screen\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Course Header */}\n            <div className=\"mb-8\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <Badge variant=\"secondary\">{course.category}</Badge>\n                <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n                  <Star className=\"h-4 w-4 text-yellow-400 fill-current mr-1\" />\n                  {course.rating || \"4.8\"}\n                </div>\n              </div>\n              \n              <h1 className=\"text-4xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\n                {course.title}\n              </h1>\n              \n              <p className=\"text-lg text-gray-600 dark:text-gray-400 mb-6\">\n                {course.description}\n              </p>\n\n              <div className=\"flex items-center gap-6 text-sm text-gray-500 dark:text-gray-400 mb-6\">\n                <div className=\"flex items-center\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  {Math.floor((course.duration || 0) / 60)}h {(course.duration || 0) % 60}m\n                </div>\n                <div className=\"flex items-center\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  {course.totalStudents || 0} students enrolled\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Course Content */}\n              <div className=\"lg:col-span-2\">\n                <Card className=\"mb-6\">\n                  <div className=\"aspect-video bg-gray-900 rounded-t-lg flex items-center justify-center\">\n                    <PlayCircle className=\"h-16 w-16 text-white\" />\n                  </div>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold mb-4\">Course Preview</h3>\n                    <p className=\"text-gray-600 dark:text-gray-400\">\n                      Get a taste of what you'll learn in this comprehensive course.\n                    </p>\n                  </CardContent>\n                </Card>\n\n                {/* What You'll Learn */}\n                <Card className=\"mb-6\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold mb-4\">What you'll learn</h3>\n                    <ul className=\"space-y-2\">\n                      <li className=\"flex items-start\">\n                        <span className=\"w-2 h-2 bg-primary rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                        <span>Master the fundamentals and advanced concepts</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <span className=\"w-2 h-2 bg-primary rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                        <span>Build real-world projects from scratch</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <span className=\"w-2 h-2 bg-primary rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                        <span>Get hands-on experience with industry tools</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <span className=\"w-2 h-2 bg-primary rounded-full mt-2 mr-3 flex-shrink-0\"></span>\n                        <span>Prepare for professional certification</span>\n                      </li>\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                {/* Course Content */}\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold mb-4\">Course Content</h3>\n                    <div className=\"space-y-3\">\n                      <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium\">1. Introduction</h4>\n                          <span className=\"text-sm text-gray-500\">3 lessons • 45 min</span>\n                        </div>\n                      </div>\n                      <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium\">2. Getting Started</h4>\n                          <span className=\"text-sm text-gray-500\">5 lessons • 1h 20min</span>\n                        </div>\n                      </div>\n                      <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium\">3. Advanced Topics</h4>\n                          <span className=\"text-sm text-gray-500\">8 lessons • 2h 15min</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Enrollment Card */}\n              <div>\n                <Card className=\"sticky top-6\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"text-center mb-6\">\n                      <p className=\"text-3xl font-bold text-primary mb-2\">\n                        ${course.price}\n                      </p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        One-time payment • Lifetime access\n                      </p>\n                    </div>\n\n                    <Button\n                      className=\"w-full mb-4\"\n                      size=\"lg\"\n                      onClick={() => enrollMutation.mutate()}\n                      disabled={enrollMutation.isPending}\n                    >\n                      {enrollMutation.isPending ? \"Enrolling...\" : \"Enroll Now\"}\n                    </Button>\n\n                    <div className=\"text-center text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                      30-day money-back guarantee\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-semibold\">This course includes:</h4>\n                      <ul className=\"space-y-2 text-sm\">\n                        <li className=\"flex items-center\">\n                          <PlayCircle className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          {Math.floor((course.duration || 0) / 60)} hours of video content\n                        </li>\n                        <li className=\"flex items-center\">\n                          <Users className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          Community access\n                        </li>\n                        <li className=\"flex items-center\">\n                          <Star className=\"h-4 w-4 mr-2 text-gray-400\" />\n                          Certificate of completion\n                        </li>\n                      </ul>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10295},"client/src/pages/courses/courses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/layout/navigation\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Star, Clock, Users, Search } from \"lucide-react\";\nimport type { Course } from \"@shared/schema\";\n\nexport default function Courses() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n\n  const { data: courses, isLoading } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const filteredCourses = courses?.filter((course) => {\n    const matchesSearch = course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         course.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = !selectedCategory || selectedCategory === \"all\" || course.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const categories = Array.from(new Set(courses?.map(course => course.category) || []));\n\n  return (\n    <div className=\"bg-gray-50 dark:bg-gray-900 min-h-screen\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\n              Explore Courses\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Discover new skills and advance your career\n            </p>\n          </div>\n\n          {/* Search and Filter */}\n          <div className=\"flex flex-col md:flex-row gap-4 mb-8\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search courses...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"md:w-48\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {categories.map((category) => (\n                  <SelectItem key={category} value={category}>\n                    {category}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Courses Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[1, 2, 3, 4, 5, 6].map((i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <div className=\"w-full h-48 bg-gray-200 dark:bg-gray-700\"></div>\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded mb-4\"></div>\n                    <div className=\"flex justify-between\">\n                      <div className=\"h-6 w-16 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                      <div className=\"h-4 w-12 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredCourses && filteredCourses.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredCourses.map((course) => (\n                <Card key={course.id} className=\"overflow-hidden hover:shadow-lg transition-shadow cursor-pointer\"\n                      onClick={() => window.location.href = `/courses/${course.id}`}>\n                  <img\n                    src={course.thumbnail || \"https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=400&h=240\"}\n                    alt={course.title}\n                    className=\"w-full h-48 object-cover\"\n                  />\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h3 className=\"font-semibold text-lg text-gray-900 dark:text-gray-100 line-clamp-2\">\n                        {course.title}\n                      </h3>\n                      <Badge variant=\"secondary\" className=\"ml-2 shrink-0\">\n                        {course.category}\n                      </Badge>\n                    </div>\n                    \n                    <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-2\">\n                      {course.description}\n                    </p>\n\n                    <div className=\"flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-4\">\n                      <div className=\"flex items-center\">\n                        <Clock className=\"h-4 w-4 mr-1\" />\n                        {Math.floor((course.duration || 0) / 60)}h {(course.duration || 0) % 60}m\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Users className=\"h-4 w-4 mr-1\" />\n                        {course.totalStudents || 0} students\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <Star className=\"h-4 w-4 text-yellow-400 fill-current\" />\n                        <span className=\"ml-1 text-sm text-gray-600 dark:text-gray-400\">\n                          {course.rating || \"4.8\"}\n                        </span>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-2xl font-bold text-primary\">\n                          ${course.price}\n                        </p>\n                      </div>\n                    </div>\n\n                    <Button \n                      className=\"w-full mt-4\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        window.location.href = `/courses/${course.id}`;\n                      }}\n                    >\n                      View Course\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500 dark:text-gray-400 text-lg\">\n                No courses found matching your criteria\n              </p>\n              <Button\n                className=\"mt-4\"\n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setSelectedCategory(\"all\");\n                }}\n              >\n                Clear Filters\n              </Button>\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7526},"client/src/pages/jobs/jobs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/layout/navigation\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Building, MapPin, Search, DollarSign, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Job } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Jobs() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedType, setSelectedType] = useState<string>(\"\");\n  const [coverLetter, setCoverLetter] = useState(\"\");\n  const [selectedJobId, setSelectedJobId] = useState<string>(\"\");\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: jobs, isLoading } = useQuery<Job[]>({\n    queryKey: [\"/api/jobs\"],\n  });\n\n  const applyMutation = useMutation({\n    mutationFn: async ({ jobId, coverLetter }: { jobId: string; coverLetter: string }) => {\n      const response = await apiRequest(\"POST\", `/api/jobs/${jobId}/apply`, { coverLetter });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Application submitted!\",\n        description: \"Your job application has been submitted successfully.\",\n      });\n      setCoverLetter(\"\");\n      setSelectedJobId(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-applications\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Application failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredJobs = jobs?.filter((job) => {\n    const matchesSearch = job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         job.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         job.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = !selectedType || selectedType === \"all\" || job.type === selectedType;\n    return matchesSearch && matchesType;\n  });\n\n  const handleApply = (jobId: string) => {\n    if (!user) {\n      toast({\n        title: \"Please log in\",\n        description: \"You need to log in to apply for jobs.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setSelectedJobId(jobId);\n  };\n\n  const submitApplication = () => {\n    if (selectedJobId && coverLetter.trim()) {\n      applyMutation.mutate({ jobId: selectedJobId, coverLetter: coverLetter.trim() });\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-50 dark:bg-gray-900 min-h-screen\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\n              Job Opportunities\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Find your next career opportunity\n            </p>\n          </div>\n\n          {/* Search and Filter */}\n          <div className=\"flex flex-col md:flex-row gap-4 mb-8\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search jobs, companies...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={selectedType} onValueChange={setSelectedType}>\n              <SelectTrigger className=\"md:w-48\">\n                <SelectValue placeholder=\"Job Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"full-time\">Full-time</SelectItem>\n                <SelectItem value=\"part-time\">Part-time</SelectItem>\n                <SelectItem value=\"contract\">Contract</SelectItem>\n                <SelectItem value=\"internship\">Internship</SelectItem>\n                <SelectItem value=\"freelance\">Freelance</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Jobs Grid */}\n          {isLoading ? (\n            <div className=\"space-y-6\">\n              {[1, 2, 3, 4].map((i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start\">\n                        <div className=\"w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded-lg mr-4\"></div>\n                        <div className=\"flex-1\">\n                          <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n                          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n                          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                        </div>\n                      </div>\n                      <div className=\"w-20 h-10 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredJobs && filteredJobs.length > 0 ? (\n            <div className=\"space-y-6\">\n              {filteredJobs.map((job) => (\n                <Card key={job.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start\">\n                        <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center mr-4\">\n                          <Building className=\"text-primary h-6 w-6\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-xl text-gray-900 dark:text-gray-100 mb-2\">\n                            {job.title}\n                          </h3>\n                          <p className=\"text-gray-600 dark:text-gray-400 font-medium mb-1\">\n                            {job.company}\n                          </p>\n                          <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-3\">\n                            <MapPin className=\"h-4 w-4 mr-1\" />\n                            {job.location}\n                          </div>\n                          \n                          <p className=\"text-gray-700 dark:text-gray-300 mb-4 line-clamp-2\">\n                            {job.description}\n                          </p>\n\n                          <div className=\"flex items-center gap-4 mb-4\">\n                            {job.salary && (\n                              <div className=\"flex items-center text-sm font-medium text-accent\">\n                                <DollarSign className=\"h-4 w-4 mr-1\" />\n                                {job.salary}\n                              </div>\n                            )}\n                            <Badge\n                              variant=\"secondary\"\n                              className={\n                                job.type === \"full-time\"\n                                  ? \"bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-400\"\n                                  : job.type === \"contract\"\n                                  ? \"bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-400\"\n                                  : \"bg-orange-100 dark:bg-orange-900/20 text-orange-800 dark:text-orange-400\"\n                              }\n                            >\n                              {job.type}\n                            </Badge>\n                            <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              Posted {new Date(job.createdAt).toLocaleDateString()}\n                            </div>\n                          </div>\n\n                          {job.skills && job.skills.length > 0 && (\n                            <div className=\"flex flex-wrap gap-2\">\n                              {job.skills.slice(0, 5).map((skill) => (\n                                <Badge\n                                  key={skill}\n                                  variant=\"outline\"\n                                  className=\"text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300\"\n                                >\n                                  {skill}\n                                </Badge>\n                              ))}\n                              {job.skills.length > 5 && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  +{job.skills.length - 5} more\n                                </Badge>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button onClick={() => handleApply(job.id)}>\n                            Apply Now\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[425px]\">\n                          <DialogHeader>\n                            <DialogTitle>Apply for {job.title}</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                                Company: {job.company}\n                              </p>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                Location: {job.location}\n                              </p>\n                            </div>\n                            \n                            <div>\n                              <label className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                                Cover Letter\n                              </label>\n                              <Textarea\n                                placeholder=\"Tell the employer why you're the right fit for this position...\"\n                                value={coverLetter}\n                                onChange={(e) => setCoverLetter(e.target.value)}\n                                className=\"mt-1\"\n                                rows={4}\n                              />\n                            </div>\n                            \n                            <div className=\"flex gap-2\">\n                              <Button\n                                onClick={submitApplication}\n                                disabled={!coverLetter.trim() || applyMutation.isPending}\n                                className=\"flex-1\"\n                              >\n                                {applyMutation.isPending ? \"Submitting...\" : \"Submit Application\"}\n                              </Button>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Building className=\"h-16 w-16 text-gray-300 dark:text-gray-600 mx-auto mb-4\" />\n              <p className=\"text-gray-500 dark:text-gray-400 text-lg mb-4\">\n                No jobs found matching your criteria\n              </p>\n              <Button\n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setSelectedType(\"\");\n                }}\n              >\n                Clear Filters\n              </Button>\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12865},"client/src/pages/messages/messages.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Navigation } from \"@/components/layout/navigation\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Send, Search, MoreVertical } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport type { Message, User } from \"@shared/schema\";\n\nfunction formatTime(date: Date): string {\n  const now = new Date();\n  const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n  \n  if (diffInHours < 1) {\n    return \"now\";\n  } else if (diffInHours < 24) {\n    return `${Math.floor(diffInHours)}h ago`;\n  } else {\n    return date.toLocaleDateString();\n  }\n}\n\ninterface MessageWithUsers extends Message {\n  sender: User;\n  recipient: User;\n}\n\ninterface Conversation {\n  user: User;\n  lastMessage: Message;\n  unreadCount: number;\n}\n\nexport default function Messages() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedConversation, setSelectedConversation] = useState<string>(\"\");\n  const [messageText, setMessageText] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Mock conversations data since we don't have a proper conversations endpoint\n  const mockConversations: Conversation[] = [\n    {\n      user: {\n        id: \"1\",\n        firstName: \"Mike\",\n        lastName: \"Johnson\",\n        profilePicture: \"https://images.unsplash.com/photo-1560250097-0b93528c311a?auto=format&fit=crop&w=100&h=100\",\n        email: \"mike@example.com\",\n        username: \"mike_j\",\n        role: \"employer\" as const,\n        password: \"\",\n        bio: null,\n        resumeUrl: null,\n        walletBalance: \"0.00\",\n        skills: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      lastMessage: {\n        id: \"1\",\n        content: \"Thanks for applying! I'd like to schedule an interview.\",\n        senderId: \"1\",\n        recipientId: user?.id || \"\",\n        createdAt: new Date(Date.now() - 2 * 60 * 1000),\n        isRead: false,\n      },\n      unreadCount: 1,\n    },\n    {\n      user: {\n        id: \"2\",\n        firstName: \"Dr. Sarah\",\n        lastName: \"Anderson\",\n        profilePicture: \"https://images.unsplash.com/photo-1582750433449-648ed127bb54?auto=format&fit=crop&w=100&h=100\",\n        email: \"sarah@example.com\",\n        username: \"dr_sarah\",\n        role: \"instructor\" as const,\n        password: \"\",\n        bio: null,\n        resumeUrl: null,\n        walletBalance: \"0.00\",\n        skills: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      lastMessage: {\n        id: \"2\",\n        content: \"Great work on your assignment! Your solution was very creative.\",\n        senderId: \"2\",\n        recipientId: user?.id || \"\",\n        createdAt: new Date(Date.now() - 60 * 60 * 1000),\n        isRead: true,\n      },\n      unreadCount: 0,\n    },\n    {\n      user: {\n        id: \"3\",\n        firstName: \"Emily\",\n        lastName: \"Rodriguez\",\n        profilePicture: \"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?auto=format&fit=crop&w=100&h=100\",\n        email: \"emily@example.com\",\n        username: \"emily_r\",\n        role: \"learner\" as const,\n        password: \"\",\n        bio: null,\n        resumeUrl: null,\n        walletBalance: \"0.00\",\n        skills: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      lastMessage: {\n        id: \"3\",\n        content: \"Would love to connect and discuss the React course!\",\n        senderId: \"3\",\n        recipientId: user?.id || \"\",\n        createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000),\n        isRead: true,\n      },\n      unreadCount: 0,\n    },\n  ];\n\n  // Mock messages for selected conversation\n  const mockMessages: Message[] = selectedConversation ? [\n    {\n      id: \"1\",\n      senderId: selectedConversation,\n      recipientId: user?.id || \"\",\n      content: \"Hi there! I saw your profile and I'm impressed with your skills.\",\n      createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      isRead: true,\n    },\n    {\n      id: \"2\",\n      senderId: user?.id || \"\",\n      recipientId: selectedConversation,\n      content: \"Thank you! I'd be happy to discuss potential opportunities.\",\n      createdAt: new Date(Date.now() - 23 * 60 * 60 * 1000),\n      isRead: true,\n    },\n    {\n      id: \"3\",\n      senderId: selectedConversation,\n      recipientId: user?.id || \"\",\n      content: mockConversations.find(c => c.user.id === selectedConversation)?.lastMessage.content || \"Great! Let's schedule a time to chat.\",\n      createdAt: mockConversations.find(c => c.user.id === selectedConversation)?.lastMessage.createdAt || new Date(),\n      isRead: false,\n    },\n  ] : [];\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ recipientId, content }: { recipientId: string; content: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/messages\", {\n        recipientId,\n        content,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setMessageText(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (messageText.trim() && selectedConversation) {\n      sendMessageMutation.mutate({\n        recipientId: selectedConversation,\n        content: messageText.trim(),\n      });\n    }\n  };\n\n\n\n  const selectedUser = mockConversations.find(c => c.user.id === selectedConversation)?.user;\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\n            Please log in to access messages\n          </h1>\n          <Button asChild>\n            <a href=\"/login\">Go to Login</a>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-gray-50 dark:bg-gray-900 min-h-screen\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"h-[calc(100vh-8rem)] max-w-6xl mx-auto\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-full\">\n              {/* Conversations List */}\n              <Card className=\"lg:col-span-1\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg\">Messages</CardTitle>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search conversations...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n                    <div className=\"space-y-1 p-4\">\n                      {mockConversations\n                        .filter(conversation =>\n                          `${conversation.user.firstName} ${conversation.user.lastName}`\n                            .toLowerCase()\n                            .includes(searchTerm.toLowerCase())\n                        )\n                        .map((conversation) => (\n                        <div\n                          key={conversation.user.id}\n                          onClick={() => setSelectedConversation(conversation.user.id)}\n                          className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${\n                            selectedConversation === conversation.user.id\n                              ? \"bg-primary text-white\"\n                              : \"hover:bg-gray-100 dark:hover:bg-gray-800\"\n                          }`}\n                        >\n                          <Avatar className=\"h-12 w-12\">\n                            <AvatarImage src={conversation.user.profilePicture || \"\"} />\n                            <AvatarFallback>\n                              {conversation.user.firstName[0]}{conversation.user.lastName[0]}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"ml-3 flex-1 min-w-0\">\n                            <div className=\"flex items-center justify-between\">\n                              <p className={`font-medium truncate ${\n                                selectedConversation === conversation.user.id\n                                  ? \"text-white\"\n                                  : \"text-gray-900 dark:text-gray-100\"\n                              }`}>\n                                {conversation.user.firstName} {conversation.user.lastName}\n                              </p>\n                              <span className={`text-xs ${\n                                selectedConversation === conversation.user.id\n                                  ? \"text-blue-100\"\n                                  : \"text-gray-500 dark:text-gray-400\"\n                              }`}>\n                                {formatTime(conversation.lastMessage.createdAt)}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center justify-between\">\n                              <p className={`text-sm truncate ${\n                                selectedConversation === conversation.user.id\n                                  ? \"text-blue-100\"\n                                  : \"text-gray-600 dark:text-gray-400\"\n                              }`}>\n                                {conversation.lastMessage.content}\n                              </p>\n                              {conversation.unreadCount > 0 && (\n                                <span className=\"ml-2 bg-primary text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                                  {conversation.unreadCount}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n\n              {/* Chat Area */}\n              <Card className=\"lg:col-span-2\">\n                {selectedConversation && selectedUser ? (\n                  <>\n                    {/* Chat Header */}\n                    <CardHeader className=\"border-b border-gray-200 dark:border-gray-700\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center\">\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarImage src={selectedUser.profilePicture || \"\"} />\n                            <AvatarFallback>\n                              {selectedUser.firstName[0]}{selectedUser.lastName[0]}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"ml-3\">\n                            <p className=\"font-medium text-gray-900 dark:text-gray-100\">\n                              {selectedUser.firstName} {selectedUser.lastName}\n                            </p>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400 capitalize\">\n                              {selectedUser.role}\n                            </p>\n                          </div>\n                        </div>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </CardHeader>\n\n                    {/* Messages */}\n                    <CardContent className=\"p-0\">\n                      <ScrollArea className=\"h-[calc(100vh-20rem)] p-4\">\n                        <div className=\"space-y-4\">\n                          {mockMessages.map((message) => (\n                            <div\n                              key={message.id}\n                              className={`flex ${\n                                message.senderId === user.id ? \"justify-end\" : \"justify-start\"\n                              }`}\n                            >\n                              <div\n                                className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                                  message.senderId === user.id\n                                    ? \"bg-primary text-white\"\n                                    : \"bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100\"\n                                }`}\n                              >\n                                <p className=\"text-sm\">{message.content}</p>\n                                <p\n                                  className={`text-xs mt-1 ${\n                                    message.senderId === user.id\n                                      ? \"text-blue-100\"\n                                      : \"text-gray-500 dark:text-gray-400\"\n                                  }`}\n                                >\n                                  {new Date(message.createdAt).toLocaleTimeString([], {\n                                    hour: '2-digit',\n                                    minute: '2-digit'\n                                  })}\n                                </p>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </ScrollArea>\n                    </CardContent>\n\n                    {/* Message Input */}\n                    <div className=\"border-t border-gray-200 dark:border-gray-700 p-4\">\n                      <div className=\"flex gap-2\">\n                        <Input\n                          placeholder=\"Type a message...\"\n                          value={messageText}\n                          onChange={(e) => setMessageText(e.target.value)}\n                          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                          className=\"flex-1\"\n                        />\n                        <Button\n                          onClick={handleSendMessage}\n                          disabled={!messageText.trim() || sendMessageMutation.isPending}\n                        >\n                          <Send className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </>\n                ) : (\n                  <CardContent className=\"flex items-center justify-center h-full\">\n                    <div className=\"text-center\">\n                      <div className=\"w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <Send className=\"h-8 w-8 text-gray-400\" />\n                      </div>\n                      <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-2\">\n                        No conversation selected\n                      </h3>\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        Choose a conversation from the list to start messaging\n                      </p>\n                    </div>\n                  </CardContent>\n                )}\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16343},"client/src/pages/profile/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Navigation } from \"@/components/layout/navigation\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { User, Edit, Plus, X, MapPin, Mail, Calendar, Briefcase } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst profileSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  bio: z.string().max(500, \"Bio must be less than 500 characters\"),\n  skills: z.array(z.string()).optional(),\n});\n\ntype ProfileForm = z.infer<typeof profileSchema>;\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [newSkill, setNewSkill] = useState(\"\");\n\n  const form = useForm<ProfileForm>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      bio: user?.bio || \"\",\n      skills: user?.skills || [],\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileForm) => {\n      const response = await apiRequest(\"PATCH\", \"/api/users/me\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      setIsEditing(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { data: enrolledCourses } = useQuery({\n    queryKey: [\"/api/my-courses\"],\n  });\n\n  const { data: jobApplications } = useQuery({\n    queryKey: [\"/api/my-applications\"],\n  });\n\n  const { data: transactions } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const onSubmit = (data: ProfileForm) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const addSkill = () => {\n    if (newSkill.trim() && !form.getValues('skills')?.includes(newSkill.trim())) {\n      const currentSkills = form.getValues('skills') || [];\n      form.setValue('skills', [...currentSkills, newSkill.trim()]);\n      setNewSkill(\"\");\n    }\n  };\n\n  const removeSkill = (skillToRemove: string) => {\n    const currentSkills = form.getValues('skills') || [];\n    form.setValue('skills', currentSkills.filter(skill => skill !== skillToRemove));\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\n            Please log in to view your profile\n          </h1>\n          <Button asChild>\n            <a href=\"/login\">Go to Login</a>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-gray-50 dark:bg-gray-900 min-h-screen\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Profile Header */}\n            <Card className=\"mb-8\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-start gap-6\">\n                  <div className=\"relative\">\n                    <img\n                      src={user.profilePicture || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?auto=format&fit=crop&w=150&h=150\"}\n                      alt=\"Profile\"\n                      className=\"w-24 h-24 rounded-full object-cover border-4 border-white dark:border-gray-800 shadow-lg\"\n                    />\n                    <Button\n                      size=\"sm\"\n                      className=\"absolute -bottom-2 -right-2 w-8 h-8 rounded-full p-0\"\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\n                          {user.firstName} {user.lastName}\n                        </h1>\n                        <p className=\"text-lg text-gray-600 dark:text-gray-400 mb-2 capitalize\">\n                          {user.role}\n                        </p>\n                        <div className=\"flex items-center text-gray-500 dark:text-gray-400 text-sm mb-4\">\n                          <Mail className=\"h-4 w-4 mr-2\" />\n                          {user.email}\n                        </div>\n                        <div className=\"flex items-center text-gray-500 dark:text-gray-400 text-sm\">\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          Joined {new Date(user.createdAt || Date.now()).toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n                        </div>\n                      </div>\n                      \n                      <Button\n                        onClick={() => setIsEditing(!isEditing)}\n                        variant={isEditing ? \"outline\" : \"default\"}\n                      >\n                        {isEditing ? \"Cancel\" : \"Edit Profile\"}\n                      </Button>\n                    </div>\n\n                    {user.bio && (\n                      <p className=\"text-gray-700 dark:text-gray-300 mt-4\">\n                        {user.bio}\n                      </p>\n                    )}\n\n                    {user.skills && user.skills.length > 0 && (\n                      <div className=\"mt-4\">\n                        <h3 className=\"text-sm font-medium text-gray-900 dark:text-gray-100 mb-2\">Skills</h3>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {user.skills.map((skill) => (\n                            <Badge key={skill} variant=\"secondary\">\n                              {skill}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Wallet Balance */}\n                <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">Wallet Balance</p>\n                      <p className=\"text-2xl font-bold text-primary\">${user.walletBalance || \"0.00\"}</p>\n                    </div>\n                    <Button variant=\"outline\">Add Funds</Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Edit Profile Form */}\n            {isEditing && (\n              <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>Edit Profile</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"bio\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Bio</FormLabel>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"Tell us about yourself...\"\n                                className=\"resize-none\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* Skills Management */}\n                      <div>\n                        <FormLabel>Skills</FormLabel>\n                        <div className=\"flex gap-2 mt-2 mb-3\">\n                          <Input\n                            placeholder=\"Add a skill...\"\n                            value={newSkill}\n                            onChange={(e) => setNewSkill(e.target.value)}\n                            onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addSkill())}\n                          />\n                          <Button type=\"button\" onClick={addSkill} size=\"sm\">\n                            <Plus className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {form.watch('skills')?.map((skill) => (\n                            <Badge key={skill} variant=\"secondary\" className=\"flex items-center gap-1\">\n                              {skill}\n                              <button\n                                type=\"button\"\n                                onClick={() => removeSkill(skill)}\n                                className=\"ml-1 text-gray-400 hover:text-gray-600\"\n                              >\n                                <X className=\"h-3 w-3\" />\n                              </button>\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n\n                      <Button\n                        type=\"submit\"\n                        disabled={updateProfileMutation.isPending}\n                        className=\"w-full md:w-auto\"\n                      >\n                        {updateProfileMutation.isPending ? \"Updating...\" : \"Update Profile\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Profile Tabs */}\n            <Tabs defaultValue=\"courses\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"courses\">My Courses</TabsTrigger>\n                <TabsTrigger value=\"applications\">Job Applications</TabsTrigger>\n                <TabsTrigger value=\"activity\">Activity</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"courses\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Enrolled Courses</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {enrolledCourses && Array.isArray(enrolledCourses) && enrolledCourses.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {enrolledCourses.map((enrollment: any) => (\n                          <div key={enrollment.id} className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                            <div className=\"flex items-center gap-4\">\n                              <img\n                                src={enrollment.course?.thumbnail || \"https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=100&h=100\"}\n                                alt=\"Course\"\n                                className=\"w-12 h-12 rounded-lg object-cover\"\n                              />\n                              <div>\n                                <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">\n                                  {enrollment.course?.title || \"Course Title\"}\n                                </h3>\n                                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                  Progress: {enrollment.progress || 0}%\n                                </p>\n                              </div>\n                            </div>\n                            <Button size=\"sm\">Continue</Button>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <p className=\"text-gray-500 dark:text-gray-400\">No courses enrolled yet</p>\n                        <Button className=\"mt-4\" asChild>\n                          <a href=\"/courses\">Browse Courses</a>\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"applications\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Job Applications</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {jobApplications && Array.isArray(jobApplications) && jobApplications.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {jobApplications.map((application: any) => (\n                          <div key={application.id} className=\"flex items-center justify-between p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\n                            <div className=\"flex items-center gap-4\">\n                              <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                                <Briefcase className=\"text-primary h-6 w-6\" />\n                              </div>\n                              <div>\n                                <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">\n                                  {application.job?.title || \"Job Title\"}\n                                </h3>\n                                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                  {application.job?.company || \"Company Name\"}\n                                </p>\n                                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                                  Applied {new Date(application.createdAt).toLocaleDateString()}\n                                </p>\n                              </div>\n                            </div>\n                            <Badge\n                              variant={\n                                application.status === \"accepted\"\n                                  ? \"default\"\n                                  : application.status === \"rejected\"\n                                  ? \"destructive\"\n                                  : \"secondary\"\n                              }\n                            >\n                              {application.status}\n                            </Badge>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <p className=\"text-gray-500 dark:text-gray-400\">No job applications yet</p>\n                        <Button className=\"mt-4\" asChild>\n                          <a href=\"/jobs\">Browse Jobs</a>\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"activity\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Recent Activity</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-gray-500 dark:text-gray-400\">Activity feed coming soon</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18027}}}